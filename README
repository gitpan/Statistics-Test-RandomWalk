NAME
    Statistics::Test::RandomWalk - Random Walk test for random numbers

SYNOPSIS
      use Statistics::Test::RandomWalk;
      my $tester = Statistics::Test::RandomWalk->new();
      $tester->set_data( [map {rand()} 1..1000000] );
  
      my $no_bins = 10;
      my ($quant, $got, $expected) = $tester->test($no_bins);
      print $tester->data_to_report($quant, $got, $expected);

DESCRIPTION
    This module implements a Random Walk test of a random number generator
    as outlined in Blobel et al (Refer to the SEE ALSO section).

    Basically, it tests that the numbers "[0,1]" generated by a random
    number generator are distributed evenly. It divides "[0,1]" into "n"
    evenly sized bins and calculates the number of expected and actual
    random numbers in the bin. (In fact, this counts the cumulated numbers,
    but that works the same.)

METHODS
  new
    Creates a new random number tester.

  set_rescale_factor
    The default range of the random numbers [0, 1) can be rescaled by a
    constant factor. This method is the setter for that factor.

  rescale_factor
    Returns the current rescaling factor.

  set_data
    Sets the random numbers to operate on. First argument must be either an
    array reference to an array of random numbers or a code reference.

    If the first argument is a code reference, the second argument must be
    an integer "n". The code reference is called "n"-times and its return
    values are used as random numbers.

    The code reference semantics are particularily useful if you do not want
    to store all random numbers in memory at the same time. You can write a
    subroutine that, for example, generates and returns batches of 100
    random numbers so no more than 101 of these numbers will be in memory at
    the same time. Note that if you return 100 numbers at once and pass in
    "n=50", you will have a sequence of 5000 random numbers.

  test
    Runs the Random Walk test on the data that was previously set using
    "set_data".

    First argument must be the number of bins.

    Returns three array references. First is an array of quantiles. If the
    number of bins was ten, this (and all other returned arrays) will hold
    ten items.

    Second are the determined numbers of random numbers below the quantiles.
    Third are the expected counts.

  data_to_report
    From the data returned by the "test()" method, this method creates a
    textual report and returns it as a string.

    Do not forget to pass in the data that was returned by "test()" or use
    the "test_report()" method directly if you do not use the data
    otherwise.

SUBROUTINES
  n_over_k
    Computes "n" over "k". Uses Perl's big number support and returns a
    Math::BigFloat object.

    This sub is memoized.

SEE ALSO
    Math::BigFloat, Memoize, Params::Util

    Random number generators: Math::Random::MT, Math::Random,
    Math::Random::OO, Math::TrulyRandom, "/dev/random" where available

    Statistics::Test::Sequence

    The algorithm was taken from: (German)

    Blobel, V., and Lohrmann, E. *Statistische und numerische Methoden der
    Datenanalyse*. Stuttgart, Leipzig: Teubner, 1998

AUTHOR
    Steffen Mueller, <smueller@cpan.org>

COPYRIGHT AND LICENSE
    Copyright (C) 2007-2010 by Steffen Mueller

    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself, either Perl version 5.6 or, at your
    option, any later version of Perl 5 you may have available.

